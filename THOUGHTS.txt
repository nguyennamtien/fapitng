TO DO
-----

* Merge hook_element_info() implementations with the form element classes.
* Implement AJAX.
* Process attached files.
* Batch API integration?
* Validate elements with predefined options (select, radio(s) and checkbox(es))
* Study (and implement parts of?) http://drupal.org/node/165104 and http://www.gliffy.com/pubdoc/1508856/L.png.
* Make multi-step forms as easy to handle as possible.
* Store form include files. See drupal_retrieve_form().
* Add procedural wrapper to handle forms programmatically.
* Only execute submit callbacks for buttons if they have been clicked.
* Allow image buttons to submit forms.
* Convert form_options_flatten()?
* Only display one error message per element.


THOUGHTS OF A CODING ATHEIST
----------------------------

* Elements can accidentally be changed in places like theme functions. This can affect a form's behavior. How do we solve this? Lock all properties? Pass a cloned element on to the theme system? What about memory implications?
* Do we need #after_build or can hook_form_BUILD_CALLBACK_alter() and $elementstng_Element->expand_callbacks() achieve the same?
* Do we need two tokens (general token and cache token)? Can't we just use one?
* What if we let FAPI work with data type elements first, and render them into actual input types depending on the output? E.g. a certain element needs to be text or an integer. In a later stage it needs to be decided if a text element is rendered as a textarea, a password input or a textfield. We'd need to remove view (as in MVC's view) code from expand functions.
* Why should modules be able to decide where an element's title is rendered (before or after)? They shouldn't mess with output AT ALL. See #title_display.
* Do we need $old_form as used in drupal_rebuild_form()?
* Do we need specific support for triggering elements in AJAX submissions (_form_element_triggered_scripted_submission() in Drupal 7). JavaScript could just as easily add the name and value of the emulated trigger element to the GET or POST data, so the request would look like a regular one, right?
* Should forms be handled programmatically at all? Form submit callbacks should call API functions, which are available to the code that wants to submit forms programmatically anyway.
* In Drupal 7 and below validate callbacks could change an element's value. Now we have validators that are no longer FAPI-specific, how do we solve this? Add some sort of post-validation processing callback or should we just let submit callbacks handle this?


WHAT'S CONVERTED?
-----------------

* Functions
  * drupal_prepare_form()
  * system_element_info()
  * _form_button_was_clicked()
  * _form_element_triggered_scripted_submission()
  * drupal_redirect_form()
* Caching
* Hook_forms() has been replaced by form arguments and multiple build callbacks.
* Hook_form_BASE_FORM_ID_alter() and hook_form_FORM_ID_alter() have been replaced by hook_form_BUILD_CALLBACK_alter().
* #process has been replaced by the 'expand' property.
* #tree and #parents have been replaced by fapitng_FormElement::parent, which is a reference to the parent element.
* fapitng_Form now contains all properties from $form_state, except those defined in form_state_keys_no_cache(), which are located in fapitng_Form::request. Those properties are to be used for a single page request only.


WHAT'S NEW?
-----------

* Prepopulation (http://drupal.org/project/prepopulate)
* More context awareness, because form elements can access their parent items and the form itself directly.


WHAT'S GONE?
------------

* _form_set_class()
* element_children()
* form_pre_render_conditional_form_element()
* form_state_keys_no_cache()
* form_state_defaults()
* form_state_values_clean()
* form_error()
* form_set_error()